// Boost Software License - Version 1.0 - August 17th, 2003
// 
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef ABSTRACTTREEMODEL_H
#define ABSTRACTTREEMODEL_H

#include <QAbstractItemModel>
#include <QScopedPointer>
#include <QSharedPointer>

class AbstractTreeNode;

class AbstractTreeModel : public QAbstractItemModel
{
    Q_OBJECT
public:
    typedef QSharedPointer<AbstractTreeNode> NodePtr;

    explicit AbstractTreeModel(QObject *parent = 0);
    virtual ~AbstractTreeModel();

    // AbstractItemModel
    virtual QModelIndex	index (int row, int column, const QModelIndex & parent = QModelIndex()) const;
    virtual QModelIndex	parent (const QModelIndex & index) const;
    virtual int	rowCount (const QModelIndex & parent = QModelIndex()) const;

protected:
    // Call init from the derived constructor!
    void init();
    virtual QList<NodePtr> createRootNodes() = 0;

    class Private;
    QScopedPointer<Private> d;
};

#endif // ABSTRACTTREEMODEL_H
